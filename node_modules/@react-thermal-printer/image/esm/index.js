// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/Image.ts
function floyd_steinberg(image) {
  const imageData = image.data;
  const imageDataLength = imageData.length;
  const w = image.width;
  const lumR = [], lumG = [], lumB = [];
  let newPixel, err;
  for (let i = 0; i < 256; i++) {
    lumR[i] = i * 0.299;
    lumG[i] = i * 0.587;
    lumB[i] = i * 0.11;
  }
  for (let i = 0; i <= imageDataLength; i += 4) {
    imageData[i] = Math.floor(
      lumR[imageData[i]] + lumG[imageData[i + 1]] + lumB[imageData[i + 2]]
    );
  }
  for (let currentPixel = 0; currentPixel <= imageDataLength; currentPixel += 4) {
    newPixel = imageData[currentPixel] < 150 ? 0 : 255;
    err = Math.floor((imageData[currentPixel] - newPixel) / 23);
    imageData[currentPixel + 0 * 1 - 0] = newPixel;
    imageData[currentPixel + 4 * 1 - 0] += err * 7;
    imageData[currentPixel + 4 * w - 4] += err * 3;
    imageData[currentPixel + 4 * w - 0] += err * 5;
    imageData[currentPixel + 4 * w + 4] += Number(err);
    imageData[currentPixel + 1] = imageData[currentPixel + 2] = imageData[currentPixel];
  }
  return image;
}
var Image = class {
  constructor(data, width, height) {
    this.data = data;
    this.width = width;
    this.height = height;
    const image = { data, width, height };
    const ditheredImage = floyd_steinberg(image);
    this.pixels = this.getPixels(ditheredImage.data, width, height);
  }
  toRaster() {
    const data = [];
    for (let i = 0; i < this.height; i++) {
      for (let j = 0; j < Math.ceil(this.width / 8); j++) {
        let byte = 0;
        for (let k = 0; k < 8; k++) {
          let pixel = this.pixels[i]?.[j * 8 + k];
          if (pixel === void 0) {
            pixel = {
              a: 0,
              r: 0,
              g: 0,
              b: 0
            };
          }
          if (pixel.a > 126) {
            const grayscale = parseInt(
              String(0.2126 * pixel.r + 0.7152 * pixel.g + 0.0722 * pixel.b)
            );
            if (grayscale < 128) {
              const mask = 1 << 7 - k;
              byte |= mask;
            }
          }
        }
        data.push(byte);
      }
    }
    return data;
  }
  getPixels(data, width, height) {
    const pixels = [];
    for (let i = 0; i < height; i++) {
      const line = [];
      for (let j = 0; j < width; j++) {
        const index = width * i + j << 2;
        line.push({
          r: data[index],
          g: data[index + 1],
          b: data[index + 2],
          a: data[index + 3]
        });
      }
      pixels.push(line);
    }
    return pixels;
  }
};
export {
  Image
};
//# sourceMappingURL=index.js.map
