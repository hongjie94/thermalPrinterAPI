{
  "version": 3,
  "sources": ["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/Image.ts"],
  "sourcesContent": ["interface Pixel {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction floyd_steinberg(image: any) {\n  const imageData = image.data;\n  const imageDataLength = imageData.length;\n  const w = image.width;\n  const lumR = [],\n    lumG = [],\n    lumB = [];\n\n  let newPixel, err;\n\n  for (let i = 0; i < 256; i++) {\n    lumR[i] = i * 0.299;\n    lumG[i] = i * 0.587;\n    lumB[i] = i * 0.11;\n  }\n\n  // Greyscale luminance (sets r pixels to luminance of rgb)\n  for (let i = 0; i <= imageDataLength; i += 4) {\n    imageData[i] = Math.floor(\n      lumR[imageData[i]]! + lumG[imageData[i + 1]]! + lumB[imageData[i + 2]]!\n    );\n  }\n\n  for (let currentPixel = 0; currentPixel <= imageDataLength; currentPixel += 4) {\n    // threshold for determining current pixel's conversion to a black or white pixel\n    newPixel = imageData[currentPixel] < 150 ? 0 : 255;\n    err = Math.floor((imageData[currentPixel] - newPixel) / 23);\n    imageData[currentPixel + 0 * 1 - 0] = newPixel;\n    imageData[currentPixel + 4 * 1 - 0] += err * 7;\n    imageData[currentPixel + 4 * w - 4] += err * 3;\n    imageData[currentPixel + 4 * w - 0] += err * 5;\n    imageData[currentPixel + 4 * w + 4] += Number(err);\n    // Set g and b values equal to r (effectively greyscales the image fully)\n    imageData[currentPixel + 1] = imageData[currentPixel + 2] = imageData[currentPixel];\n  }\n\n  return image;\n}\n\nexport class Image {\n  private readonly pixels: Pixel[][];\n\n  constructor(\n    private readonly data: Uint8Array,\n    private readonly width: number,\n    private readonly height: number\n  ) {\n    const image = { data, width, height };\n    const ditheredImage = floyd_steinberg(image);\n    this.pixels = this.getPixels(ditheredImage.data, width, height);\n  }\n\n  toRaster(): number[] {\n    const data: number[] = [];\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < Math.ceil(this.width / 8); j++) {\n        let byte = 0x0;\n        for (let k = 0; k < 8; k++) {\n          let pixel = this.pixels[i]?.[j * 8 + k];\n\n          // Image overflow\n          if (pixel === undefined) {\n            pixel = {\n              a: 0,\n              r: 0,\n              g: 0,\n              b: 0,\n            };\n          }\n\n          if (pixel.a > 126) {\n            // checking transparency\n            const grayscale = parseInt(\n              String(0.2126 * pixel.r + 0.7152 * pixel.g + 0.0722 * pixel.b)\n            );\n\n            if (grayscale < 128) {\n              // checking color\n              const mask = 1 << (7 - k); // setting bitwise mask\n              byte |= mask; // setting the correct bit to 1\n            }\n          }\n        }\n        data.push(byte);\n      }\n    }\n    return data;\n  }\n\n  private getPixels(data: Uint8Array, width: number, height: number): Pixel[][] {\n    const pixels: Pixel[][] = [];\n\n    for (let i = 0; i < height; i++) {\n      const line: Pixel[] = [];\n\n      for (let j = 0; j < width; j++) {\n        const index = (width * i + j) << 2;\n        line.push({\n          r: data[index]!,\n          g: data[index + 1]!,\n          b: data[index + 2]!,\n          a: data[index + 3]!,\n        });\n      }\n\n      pixels.push(line);\n    }\n\n    return pixels;\n  }\n}\n"],
  "mappings": ";AAOA,SAAS,gBAAgB,OAAY;AACnC,QAAM,YAAY,MAAM;AACxB,QAAM,kBAAkB,UAAU;AAClC,QAAM,IAAI,MAAM;AAChB,QAAM,OAAO,CAAC,GACZ,OAAO,CAAC,GACR,OAAO,CAAC;AAEV,MAAI,UAAU;AAEd,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,SAAK,KAAK,IAAI;AACd,SAAK,KAAK,IAAI;AACd,SAAK,KAAK,IAAI;AAAA,EAChB;AAGA,WAAS,IAAI,GAAG,KAAK,iBAAiB,KAAK,GAAG;AAC5C,cAAU,KAAK,KAAK;AAAA,MAClB,KAAK,UAAU,MAAO,KAAK,UAAU,IAAI,MAAO,KAAK,UAAU,IAAI;AAAA,IACrE;AAAA,EACF;AAEA,WAAS,eAAe,GAAG,gBAAgB,iBAAiB,gBAAgB,GAAG;AAE7E,eAAW,UAAU,gBAAgB,MAAM,IAAI;AAC/C,UAAM,KAAK,OAAO,UAAU,gBAAgB,YAAY,EAAE;AAC1D,cAAU,eAAe,IAAI,IAAI,KAAK;AACtC,cAAU,eAAe,IAAI,IAAI,MAAM,MAAM;AAC7C,cAAU,eAAe,IAAI,IAAI,MAAM,MAAM;AAC7C,cAAU,eAAe,IAAI,IAAI,MAAM,MAAM;AAC7C,cAAU,eAAe,IAAI,IAAI,MAAM,OAAO,GAAG;AAEjD,cAAU,eAAe,KAAK,UAAU,eAAe,KAAK,UAAU;AAAA,EACxE;AAEA,SAAO;AACT;AAEO,IAAM,QAAN,MAAY;AAAA,EAGjB,YACmB,MACA,OACA,QACjB;AAHiB;AACA;AACA;AAEjB,UAAM,QAAQ,EAAE,MAAM,OAAO,OAAO;AACpC,UAAM,gBAAgB,gBAAgB,KAAK;AAC3C,SAAK,SAAS,KAAK,UAAU,cAAc,MAAM,OAAO,MAAM;AAAA,EAChE;AAAA,EAEA,WAAqB;AACnB,UAAM,OAAiB,CAAC;AAExB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,QAAQ,CAAC,GAAG,KAAK;AAClD,YAAI,OAAO;AACX,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAI,QAAQ,KAAK,OAAO,KAAK,IAAI,IAAI;AAGrC,cAAI,UAAU,QAAW;AACvB,oBAAQ;AAAA,cACN,GAAG;AAAA,cACH,GAAG;AAAA,cACH,GAAG;AAAA,cACH,GAAG;AAAA,YACL;AAAA,UACF;AAEA,cAAI,MAAM,IAAI,KAAK;AAEjB,kBAAM,YAAY;AAAA,cAChB,OAAO,SAAS,MAAM,IAAI,SAAS,MAAM,IAAI,SAAS,MAAM,CAAC;AAAA,YAC/D;AAEA,gBAAI,YAAY,KAAK;AAEnB,oBAAM,OAAO,KAAM,IAAI;AACvB,sBAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AACA,aAAK,KAAK,IAAI;AAAA,MAChB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,UAAU,MAAkB,OAAe,QAA2B;AAC5E,UAAM,SAAoB,CAAC;AAE3B,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,YAAM,OAAgB,CAAC;AAEvB,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,cAAM,QAAS,QAAQ,IAAI,KAAM;AACjC,aAAK,KAAK;AAAA,UACR,GAAG,KAAK;AAAA,UACR,GAAG,KAAK,QAAQ;AAAA,UAChB,GAAG,KAAK,QAAQ;AAAA,UAChB,GAAG,KAAK,QAAQ;AAAA,QAClB,CAAC;AAAA,MACH;AAEA,aAAO,KAAK,IAAI;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
